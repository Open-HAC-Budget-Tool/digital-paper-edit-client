{"version":3,"sources":["Util/which-js-env/index.js","Components/lib/CustomBreadcrumb/index.js","ApiWrapper/cors_wrapper.js","ApiWrapper/ApiWrapper.js","ApiWrapper/DemoApiWrapper/index.js","ApiWrapper/index.js"],"names":["whichJsEnv","undefined","window","process","versions","electron","console","debug","cep","error","CustomBreadcrumb","breadcrumbs","this","props","items","map","item","index","link","key","to","Item","name","active","scoped","backgroundColor","Component","METHODS","validateRESTMethod","method","includes","Error","getCorsConfig","corsConfig","data","applicationType","mode","body","JSON","stringify","headers","corsFetch","url","a","async","fetch","ApiWrapper","projectsIdUrl","projectId","projectsUrl","transcriptsUrl","transcriptsIdUrl","transcriptId","queryParamsOptions","queryParams","querystring","trim","paperEditsUrl","paperEditsIdUrl","paperEditId","annotationsUrl","annotationsIdUrl","annotationId","labelsUrl","labelsIdUrl","labelsId","baseUrl","env","API_URL","res","json","projects","id","getProject","resProject","projectTitle","project","title","transcriptTitle","labelId","paperedits","getTranscript","transcriptResult","getAllLabels","labelsResults","getAllAnnotations","annotationsResult","results","labels","transcript","annotations","papereditId","getTranscripts","transcriptsResult","Promise","all","transcripts","transcriptsJson","annotationsJson","forEach","tr","currentAnnotationsSet","find","getPaperEdit","paperEditResult","projectResult","programmeScript","fileName","resolve","reject","input","output","ffmpegPath","waveForm","waveFormMode","waveFormColor","DemoApiWrapper","response","length","_id","status","alert","ok","filter","formData","annotation","defaultLabel","label","unshift","paperedit","paperEdit","statusCode","jsENV","log","demoApiWrapper","Object","freeze","apiWrapper","electronWrapper","ElectronWrapper","adobeCEPWrapper","AdobeCEPWrapper"],"mappings":"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","file":"static/js/4.eced95bb.chunk.js","sourcesContent":["/**\n * Determines the enviroment Javascript is being run on\n * @returns - 'browser', 'electron', 'cep'. where cep stands for adobe CEP panel\n */\nfunction whichJsEnv() {\n// Is browser Eg client side app\n  if (window.process === undefined) {\n    // console.debug('In browser Environment');\n    if (process.env.REACT_APP_NODE_ENV === 'demo') {\n      return 'demo';\n    }\n\n    return 'browser';\n  } else {\n    if (window.process.versions.electron !== undefined) {\n        console.debug('In Electron Enviroment');\n      //   console.info('In Electron v: ', window.process.versions.electron);\n      //   console.info('Using chrome v: ', window.process.versions.chrome);\n      return 'electron';\n    }\n    else if (window.process.versions.cep !== undefined) {\n        console.debug('In Adobe CEP Environment');\n      //   console.info('In Chromium v: ', window.process.versions.chromium);\n      //   console.info('In CEP (Adobe Common Extensibility Platform ) v: ', window.process.versions.cep);\n      //   console.info('adjusting current working directory for Adobe CEP');\n      //   console.log('Starting directory: ' + process.cwd());\n      // try {\n      //   // commenting out because of error \"chdir: Error: process.chdir is not supported\"\n      //   // process.chdir(__dirname);\n      //   // process.chdir('..');\n      //   // console.log('New directory: ' + process.cwd());\n      // }\n      // catch (err) {\n      //   console.log('chdir: ' + err);\n      // }\n      return 'cep';\n    }\n    else {\n      console.error(\"couldn't determine the js environment\");\n\n      return undefined;\n    }\n  }\n}\n\nfunction isBrowser() {\n  return whichJsEnv() === 'browser';\n}\n\nfunction isElectron() {\n  return whichJsEnv() === 'electron';\n}\n\nfunction isCep() {\n  return whichJsEnv() === 'isCep';\n}\n\nexport default whichJsEnv;\n\nexport { isElectron, isBrowser, isCep, whichJsEnv };\n","import React, { Component } from 'react';\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nclass CustomBreadcrumb extends Component {\n\n  render() {\n    const breadcrumbs = this.props.items.map((item, index) => {\n      if (item.link) {\n        return (\n          <LinkContainer key={ index } to={ item.link }>\n            <Breadcrumb.Item>{item.name}</Breadcrumb.Item>\n          </LinkContainer>\n        );\n      } else {\n        return (\n          <Breadcrumb.Item key={ index } active>\n            {item.name}\n          </Breadcrumb.Item>\n        );\n      }\n    });\n\n    return (\n      <>\n      <style scoped>\n        {`\n        .breadcrumb{ \n          background-color: ${this.props.backgroundColor};\n          ${this.props.backgroundColor? ' margin: 0px':''} \n          }\n        `}\n      </style>\n      <div\n      // className=\"d-none d-sm-block\"\n      >\n        <Breadcrumb>\n          {breadcrumbs}\n        </Breadcrumb>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default CustomBreadcrumb;\n","/**\n * Helper function tto wrap fetch post request\n * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options\n * @param {string} url - API end point\n * @param {object} data - json data to send\n */\n\nconst METHODS = [ 'GET', 'POST', 'PUT', 'DELETE' ];\n\nconst validateRESTMethod = (method) => {\n  if (!METHODS.includes(method)) {\n    throw new Error(`Wrong method passed ${ method } - should be one of ${ METHODS }`);\n  }\n\n  return;\n\n};\n\nconst getCorsConfig = (method, data = {}, applicationType) => {\n  let corsConfig;\n\n  if (method === 'PUT') {\n    corsConfig = {\n      method: method,\n      mode: 'cors',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  } else if (method === 'POST') {\n\n    corsConfig = {\n      method: method,\n      // TODO: commenting all of these settings out as with those on file upload doesn't work :man-shrugging: . Needs further investigation.\n      // mode: 'no-cors',\n      // cache: 'no-cache',\n      // credentials: 'same-origin',\n      // headers: {\n      //   'Content-Type': 'application/json'\n      // },\n      // redirect: 'follow',\n      // referrer: 'no-referrer',\n      // NOTE: Form data contains a file, so should not be stringified\n      // body: data\n    };\n    // if sending data as a json file\n    if (applicationType === 'json') {\n      corsConfig.headers = {\n        'Content-Type': 'application/json'\n      };\n      corsConfig.body = JSON.stringify(data);\n    }\n    // if sending something else like a video or audio file in form body\n    else {\n      corsConfig.body = data;\n    }\n  }\n  else {\n    corsConfig = {\n      method: method,\n      mode: 'cors'\n    };\n  }\n\n  return corsConfig;\n};\n\nasync function corsFetch(url, method = 'GET', data = {}, applicationType) {\n  validateRESTMethod(method);\n  const corsConfig = getCorsConfig(method, data, applicationType);\n\n  return await fetch(url, corsConfig);\n}\n\nexport default corsFetch;\n","import querystring from 'querystring';\nimport corsFetch from './cors_wrapper.js';\n\nclass ApiWrapper {\n  constructor() {\n    this.baseUrl = window.env.API_URL;\n    window.env.API_URL = null;\n\n    this.projectsUrl = `${ this.baseUrl }/api/projects`;\n  }\n  projectsIdUrl = (projectId) => `${ this.projectsUrl }/${ projectId }`;\n\n  transcriptsUrl = (projectId) => `${ this.projectsIdUrl(projectId) }/transcripts`;\n  transcriptsIdUrl = (projectId, transcriptId, queryParamsOptions) => {\n    const queryParams = queryParamsOptions\n      ? `?${ querystring.stringify(queryParamsOptions) }`\n      : '';\n\n    return `${ this.transcriptsUrl(projectId) }/${ transcriptId }${ queryParams }`.trim();\n  };\n\n  paperEditsUrl = (projectId) => `${ this.projectsIdUrl(projectId) }/paperedits`;\n  paperEditsIdUrl = (projectId, paperEditId) => `${ this.projectsIdUrl(projectId) }/paperedits/${ paperEditId }`;\n\n  annotationsUrl = (projectId, transcriptId) => `${ this.transcriptsIdUrl(projectId, transcriptId) }/annotations`;\n  annotationsIdUrl = (projectId, transcriptId, annotationId) => `${ this.transcriptsIdUrl(projectId, transcriptId) }/annotations/${ annotationId }`;\n\n  labelsUrl = (projectId) => `${ this.projectsIdUrl(projectId) }/labels`;\n  labelsIdUrl = (projectId, labelsId) => `${ this.projectsIdUrl(projectId) }/labels/${ labelsId }`;\n\n  /**\n   * Projects\n   */\n  async getAllProjects() {\n    const res = await corsFetch(this.projectsUrl);\n    const json = await res.json();\n\n    return json.projects;\n  }\n\n  async getProject(id) {\n    const res = await corsFetch(this.projectsIdUrl(id));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createProject(data) {\n    const res = await corsFetch(this.projectsUrl, 'POST', data, 'json');\n\n    return await res.json();\n  }\n\n  async updateProject(id, data) {\n    const res = await corsFetch(this.projectsIdUrl(id), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n\n  async deleteProject(id) {\n    const res = await corsFetch(this.projectsIdUrl(id), 'DELETE');\n\n    return res;\n  }\n\n  /**\n   * Transcripts\n   */\n  async getTranscripts(projectId) {\n    const res = await corsFetch(this.transcriptsUrl(projectId));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createTranscript(projectId, data) {\n    const res = await corsFetch(this.transcriptsUrl(projectId), 'POST', data);\n    const json = await res.json();\n\n    return json;\n  }\n  async getTranscript(projectId, transcriptId, queryParamsOptions) {\n    const res = await corsFetch(this.transcriptsIdUrl(projectId, transcriptId, queryParamsOptions));\n    const json = await res.json();\n    // get project title\n    const resProject = await this.getProject(projectId);\n    // console.log('resProject', resProject.project.title, json);\n    json.projectTitle = resProject.project.title;\n    json.transcriptTitle = json.title;\n    delete json.title;\n\n    return json;\n  }\n\n  async updateTranscript(projectId, transcriptId, queryParamsOptions, data) {\n    const res = await corsFetch(this.transcriptsIdUrl(projectId, transcriptId, queryParamsOptions), 'PUT', data);\n\n    return res;\n  }\n\n  async deleteTranscript(projectId, transcriptId) {\n    const res = await corsFetch(this.transcriptsIdUrl(projectId, transcriptId), 'DELETE');\n\n    return res;\n  }\n\n  /**\n   * Annotations\n   */\n  async getAllAnnotations(projectId, transcriptId) {\n    const res = await fetch(this.annotationsUrl(projectId, transcriptId));\n    // console.log('getAllAnnotations', res);\n    const json = await res.json();\n\n    return json;\n  }\n\n  // not used\n  async getAnnotation(projectId, transcriptId, annotationId) {\n    const res = await corsFetch(this.annotationsIdUrl(projectId, transcriptId, annotationId));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createAnnotation(projectId, transcriptId, data) {\n    const res = await corsFetch(this.annotationsUrl(projectId, transcriptId), 'POST', data, 'json');\n\n    return await res.json();\n  }\n\n  async updateAnnotation(projectId, transcriptId, annotationId, data) {\n    const res = await corsFetch(this.annotationsIdUrl(projectId, transcriptId, annotationId), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n\n  async deleteAnnotation(projectId, transcriptId, annotationId) {\n    const res = await corsFetch(this.annotationsIdUrl(projectId, transcriptId, annotationId), 'DELETE');\n    const json = await res.json();\n\n    return json;\n  }\n\n  /**\n   * Labels\n   */\n\n  // Get All Labels\n  async getAllLabels(projectId) {\n    const res = await fetch(this.labelsUrl(projectId));\n    const json = await res.json();\n\n    return json;\n  }\n  // Get Label - not used\n  async getLabel(projectId, labelId) {\n    const res = await corsFetch(this.labelsIdUrl(projectId, labelId));\n    const json = await res.json();\n\n    return json;\n  }\n\n  // Create Label\n  async createLabel(projectId, data) {\n    const res = await corsFetch(this.labelsUrl(projectId), 'POST', data, 'json');\n    const json = await res.json();\n\n    return json;\n  }\n  // Update Label\n  async updateLabel(projectId, labelId, data) {\n    const res = await corsFetch(this.labelsIdUrl(projectId, labelId), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n  // Delete Label\n  async deleteLabel(projectId, labelId) {\n    const res = await corsFetch(this.labelsIdUrl(projectId, labelId), 'DELETE');\n    const json = await res.json();\n\n    return json;\n  }\n  /**\n   * PaperEdits\n   */\n  async getAllPaperEdits(projectId) {\n    const res = await corsFetch(this.paperEditsUrl(projectId));\n    const json = await res.json();\n\n    return json.paperedits;\n  }\n\n  async getPaperEdit(projectId, id) {\n    const res = await corsFetch(this.paperEditsIdUrl(projectId, id));\n    const json = await res.json();\n\n    return json;\n  }\n\n  async createPaperEdit(projectId, data) {\n    const res = await corsFetch(this.paperEditsUrl(projectId), 'POST', data, 'json');\n\n    return await res.json();\n  }\n\n  async updatePaperEdit(projectId, id, data) {\n    const res = await corsFetch(this.paperEditsIdUrl(projectId, id), 'PUT', data);\n    const json = await res.json();\n\n    return json;\n  }\n\n  async deletePaperEdit(projectId, id) {\n    const res = await corsFetch(this.paperEditsIdUrl(projectId, id), 'DELETE');\n\n    return res;\n  }\n\n  /**\n   * Helper SDK function to avoid making multiple calls client side when in Annotated Transcript view\n   * Transcript + Annotations for that transcript + Labels for the project\n   */\n  async getTranscriptLabelsAnnotations(projectId, transcriptId) {\n    // GET Transcripts\n    const transcriptResult = await this.getTranscript(projectId, transcriptId);\n    // GET Labels for Project <-- or separate request in label component\n    const labelsResults = await this.getAllLabels(projectId, transcriptId);\n    // GET Annotation for Transcript\n    const annotationsResult = await this.getAllAnnotations(projectId, transcriptId);\n\n    // Combine results\n    const results = {\n      transcriptId: transcriptId,\n      projectId: projectId,\n      projectTitle: transcriptResult.projectTitle,\n      transcriptTitle: transcriptResult.transcriptTitle,\n      url: transcriptResult.url,\n      labels: labelsResults.labels,\n      transcript:  transcriptResult.transcript,\n      annotations: annotationsResult.annotations\n    };\n\n    return results;\n  }\n\n  // Helper function to get program script & associated transcript\n  // https://flaviocopes.com/javascript-async-await-array-map/\n  async getProgrammeScriptAndTranscripts(projectId, papereditId) {\n    // get transcripts list, this contain id, title, description only\n    const transcriptsResult = await this.getTranscripts(projectId);\n    // use that list of ids to loop through and get json payload for each individual transcript\n    // as separate request\n\n    // TODO: also add annotations for each Transcripts\n    const transcriptsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      // const annotations = this.getAllAnnotations(projectId, transcript.id);\n      const transcriptTmp = this.getTranscript(projectId, transcript.id);\n      // transcriptTmp.annotations = annotations;\n\n      return transcriptTmp;\n    }));\n\n    const annotationsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      const annotations = this.getAllAnnotations(projectId, transcript.id);\n\n      return annotations;\n    }));\n\n    // add annotations to transcript\n    transcriptsJson.forEach((tr) => {\n      // get annotations for transcript\n      const currentAnnotationsSet = annotationsJson.find((a) => {\n\n        return a.transcriptId === tr.id;\n      });\n      // if there are annotations for this transcript add them to it\n      if (currentAnnotationsSet) {\n        tr.annotations = currentAnnotationsSet.annotations;\n\n        return;\n      }\n      else {\n        tr.annotations = [];\n      }\n    });\n\n    // getting program script for paperEdit\n    const paperEditResult = await this.getPaperEdit(projectId, papereditId);\n    // getting project info - eg to get tile and description\n    const projectResult = await this.getProject(projectId);\n    // Get labels\n    const labelsResults = await this.getAllLabels(projectId);\n    // package results\n    const results = {\n      programmeScript: paperEditResult.programmeScript,\n      project: projectResult.project,\n      // each transcript contains its annotations\n      transcripts: transcriptsJson,\n      labels: labelsResults.labels\n    };\n\n    return results;\n  }\n\n  async exportVideo(data, fileName){\n    return new Promise((resolve, reject) => {\n      // In electron prompt for file destination \n      // default to desktop on first pass \n      const ffmpegRemixData = {\n        input: data, \n        output: `~/Desktop/${fileName}`,\n        ffmpegPath: ''//add electron ffmpeg bin \n      }\n      resolve(ffmpegRemixData)\n    })\n  }\n\n  async exportAudio(data, fileName,waveForm, waveFormMode, waveFormColor){\n    return new Promise((resolve, reject) => {\n      // In electron prompt for file destination \n      // default to desktop on first pass \n      const ffmpegRemixData = {\n        input: data, \n        output: `~/Desktop/${fileName}`,\n        ffmpegPath: ''//add electron ffmpeg bin \n      }\n      resolve(ffmpegRemixData)\n    })\n  }\n}\n\nexport default ApiWrapper;","class DemoApiWrapper {\n  /**\n   * Projects\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getAllProjects() {\n    const response = await fetch('db/projects.json');\n    const projects = await response.json();\n    let results = 0;\n    if (projects.length !== 0) {\n      results = projects.map((project) => {\n        project.id = project._id;\n\n        return project;\n      });\n\n      return results;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getProject(id) {\n    const response = await fetch('db/projects.json');\n    const projects = await response.json();\n    const project = projects.find((project) => {\n      return project._id === id;\n    });\n\n    return { status: 'ok', project:project };\n  }\n\n  async createProject(data) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n\n  async updateProject(id, data) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n\n  async deleteProject(id) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false', project: { } };\n  }\n\n  /**\n   * Transcripts\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getTranscripts(projectId) {\n    const response = await fetch('db/transcripts.json');\n    let transcripts = await response.json();\n    transcripts = transcripts.filter((transcript) => {\n      return transcript.projectId === projectId;\n    });\n\n    transcripts = transcripts.map((transcript) => {\n      transcript.id = transcript._id;\n\n      return transcript;\n    });\n\n    return { transcripts: transcripts };\n  }\n\n  async createTranscript(projectId, formData, data) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n\n  async getTranscript(projectId, transcriptId, queryParamsOptions) {\n    const response = await fetch('db/transcripts.json');\n    const transcripts = await response.json();\n    const transcript = transcripts.find((transcript) => {\n      return transcript._id === transcriptId;\n    });\n\n    transcript.id = transcript._id;\n    const resProject = await this.getProject(projectId);\n    transcript.projectTitle = resProject.project.title;\n    transcript.transcriptTitle = transcript.title;\n\n    return transcript;\n  }\n\n  async updateTranscript(projectId, transcriptId, queryParamsOptions, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false };\n  }\n\n  async deleteTranscript(projectId, transcriptId) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n\n  /**\n   * Annotations\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getAllAnnotations(projectId, transcriptId) {\n\n    const response = await fetch('db/annotations.json');\n    let annotations = await response.json();\n\n    annotations = annotations.filter((annotation) => {\n      return annotation.transcriptId === transcriptId;\n    });\n\n    if (annotations) {\n      annotations = annotations\n        .map((annotation) => {\n          annotation.id = annotation._id;\n\n          return annotation;\n        });\n    } else {\n      annotations = [];\n    }\n\n    return { annotations };\n  }\n\n  // not used\n  async getAnnotation(projectId, transcriptId, annotationId) {\n    const response = await fetch('db/annotations.json');\n    const annotations = await response.json();\n    const annotation = annotations[0];\n\n    return { annotation };\n  }\n\n  async createAnnotation(projectId, transcriptId, data) {\n    alert('Not implemented in demo mode');\n\n    return { 'ok': false, status: 'false', annotation: [] };\n  }\n\n  async deleteAnnotation(projectId, transcriptId, annotationId) {\n    alert('Not implemented in demo mode');\n\n    return { 'ok': false, status: 'false' };\n  }\n\n  /**\n   * Labels\n   */\n\n  // Get All Labels\n  // eslint-disable-next-line class-methods-use-this\n  async getAllLabels(projectId) {\n    const response = await fetch('db/labels.json');\n    let labels = await response.json();\n    const defaultLabel = labels[0];\n    labels = labels.filter((label) => {\n      return label.projectId === projectId;\n    });\n    labels.unshift(defaultLabel);\n\n    if (!labels) {\n      labels = [];\n    }\n\n    return { ok: true, status: 'ok', labels };\n  }\n  // Get Label - not used\n  async getLabel(projectId, labelId) {\n    const response = await fetch('db/labels.json');\n    const labels = await response.json();\n    const label = labels[0];\n\n    return { ok: true, status: 'ok', label };\n  }\n\n  // Create Label\n  async createLabel(projectId, data) {\n    alert('Not implemented in demo mode');\n\n    return ({ ok: false, status: 'false' });\n  }\n\n  // Update Label\n  async updateLabel(projectId, labelId, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n  // Delete Label\n  async deleteLabel(projectId, labelId) {\n    alert('Not implemented in demo mode');\n\n    return { status: 'false' };\n  }\n  /**\n   * PaperEdits\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async getAllPaperEdits(projectId) {\n    const response = await fetch('db/paperedits.json');\n    let paperedits = await response.json();\n    paperedits = paperedits.filter((paperedit) => {\n      return paperedit.projectId === projectId;\n    });\n    const data = {};\n    data.paperedits = [];\n    data.paperedits = paperedits;\n    if (data.paperedits) {\n      data.paperedits = data.paperedits\n        .map((paperedit) => {\n          paperedit.id = paperedit._id;\n\n          return paperedit;\n        });\n    }\n\n    return data.paperedits;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getPaperEdit(projectId, id) {\n    const paperEditId = id;\n    const response = await fetch('db/paperedits.json');\n    const paperedits = await response.json();\n    const paperEdit = paperedits.find((paperedit) => {\n      return paperedit.id === paperEditId;\n    });\n    if (!paperEdit) {\n      const err = new Error('No paper edit found');\n      err.statusCode = 404;\n    }\n\n    return { ok: true, status: 'ok', programmeScript: paperEdit };\n  }\n\n  async createPaperEdit(projectId, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n\n  async updatePaperEdit(projectId, id, data) {\n    alert('Not implemented in demo mode');\n\n    return { ok:true, status: 'false' };\n  }\n\n  async deletePaperEdit(projectId, id) {\n    alert('Not implemented in demo mode');\n\n    return { ok: false, status: 'false' };\n  }\n\n  /**\n   * Helper SDK function to avoid making multiple calls client side when in Annotated Transcript view\n   * Transcript + Annotations for that transcript + Labels for the project\n   */\n  async getTranscriptLabelsAnnotations(projectId, transcriptId) {\n    // GET Transcripts\n    const transcriptResult = await this.getTranscript(projectId, transcriptId);\n    // GET Labels for Project <-- or separate request in label component\n    const labelsResults = await this.getAllLabels(projectId, transcriptId);\n    // GET Annotation for Transcript\n    const annotationsResult = await this.getAllAnnotations(projectId, transcriptId);\n\n    // Combine results\n    const results = {\n      transcriptId: transcriptId,\n      projectId: projectId,\n      projectTitle: transcriptResult.projectTitle,\n      transcriptTitle: transcriptResult.transcriptTitle,\n      url: transcriptResult.url,\n      labels: labelsResults.labels,\n      transcript:  transcriptResult.transcript,\n      annotations: annotationsResult.annotations\n    };\n\n    return results;\n  }\n\n  // Helper function to get program script & associated transcript\n  // https://flaviocopes.com/javascript-async-await-array-map/\n  async getProgrammeScriptAndTranscripts(projectId, papereditId) { // // get transcripts list, this contain id, title, description only\n    const transcriptsResult = await this.getTranscripts(projectId);\n    // use that list of ids to loop through and get json payload for each individual transcript\n    // as separate request\n\n    const transcriptsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      const transcriptTmp = this.getTranscript(projectId, transcript.id);\n\n      return transcriptTmp;\n    }));\n\n    const annotationsJson = await Promise.all(transcriptsResult.transcripts.map((transcript) => {\n      const annotations = this.getAllAnnotations(projectId, transcript.id);\n\n      return annotations;\n    }));\n\n    // add annotations to transcript\n    transcriptsJson.forEach((tr) => {\n      // get annotations for transcript\n      const currentAnnotationsSet = annotationsJson.find((a) => {\n\n        return a.transcriptId === tr.id;\n      });\n      // if there are annotations for this transcript add them to it\n      if (currentAnnotationsSet) {\n        tr.annotations = currentAnnotationsSet.annotations;\n\n        return;\n      }\n      else {\n        tr.annotations = [];\n      }\n    });\n\n    // getting program script for paperEdit\n    const paperEditResult = await this.getPaperEdit(projectId, papereditId);\n    // getting project info - eg to get tile and description\n    const projectResult = await this.getProject(projectId);\n    // Get labels\n    const labelsResults = await this.getAllLabels(projectId);\n    // package results\n    const results = {\n      programmeScript: paperEditResult.programmeScript,\n      project: projectResult.project,\n      // each transcript contains its annotations\n      transcripts: transcriptsJson,\n      labels: labelsResults.labels\n    };\n\n    return results;\n  }\n}\n\n// module.exports = DemoApiWrapper;\nexport default DemoApiWrapper;","import ApiWrapper from './ApiWrapper';\nimport DemoApiWrapper from './DemoApiWrapper/index.js';\nimport whichJsEnv from '../Util/which-js-env';\n\nconst jsENV = whichJsEnv();\n\n// dynamic export\n// https://medium.com/@WebReflection/javascript-dynamic-import-export-b0e8775a59d4\nexport default (() => {\n  // await async dependencies\n  // export the module\n  if (jsENV === 'demo') {\n    console.log('API Wrapper demo time!');\n    const demoApiWrapper = new DemoApiWrapper();\n    Object.freeze(demoApiWrapper);\n\n    return demoApiWrapper;\n  }\n  if (jsENV === 'browser') {\n    const apiWrapper = new ApiWrapper();\n    Object.freeze(apiWrapper);\n\n    return apiWrapper;\n  }\n  if (jsENV === 'electron') {\n    // try {\n    //   const { ipcRenderer } = require('electron');\n    //   const appPath = ipcRenderer.sendSync('synchronous-message-get-app-path', 'ping');\n    // const path = require('path');\n    // console.log(window.appPath, 'window.AppPath', 'process.cwd()', process.cwd());\n    //   window.process.chdir(appPath);\n    // const ElectronWrapper = require(path.join(window.appPath, 'src', 'ElectronWrapper', 'index.js'));\n    const ElectronWrapper = window.ElectronWrapper;\n    const electronWrapper = new ElectronWrapper();\n    Object.freeze(electronWrapper);\n    return electronWrapper;\n    // } catch (e) {\n    //   console.error('api wrapper electron', e);\n    // }\n  }\n  if (jsENV === 'cep') {\n    // TODO: not sure if this will work\n    // try {\n    // console.log('__dirname', __dirname);\n    // console.log('process.cwd()', process.cwd());\n    // /////////////////////////\n    // console.log('  process.chdir(__dirname);');\n    // process.chdir(__dirname);\n    // /////////////////////////\n    // console.log('__dirname', __dirname);\n    // console.log('process.cwd()', process.cwd());\n\n    // const path = require('path');\n    // const AdobeCEPWrapper = require(path.join(__dirname, 'src', 'AdobeCEPWrapper', 'index.js'));\n    // window.AdobeCEPWrapper = AdobeCEPWrapper;\n\n    const AdobeCEPWrapper = window.AdobeCEPWrapper;\n    const adobeCEPWrapper = new AdobeCEPWrapper();\n    Object.freeze(adobeCEPWrapper);\n\n    return adobeCEPWrapper;\n    // } catch (err) {\n    //   console.log('chdir: ' + err);\n    // }\n  }\n})();\n"],"sourceRoot":""}