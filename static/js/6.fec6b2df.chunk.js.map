{"version":3,"sources":["Components/lib/TranscriptViewer/SideBtns.js","Components/lib/TranscriptViewer/index.js"],"names":["SideBtns","handleExport","optionalBtns","handleSetEditable","isEditable","isProcessing","useState","anchorMenuEl","setAnchorMenuEl","handleMenuClose","className","Tooltip","title","color","disabled","onClick","aria-controls","aria-haspopup","event","currentTarget","Menu","id","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","Link","style","type","ext","speakers","timecodes","isDownload","atlasFormat","Divider","inlineTimecodes","hideTitle","subtitlesExportOptionsList","map","index","label","key","PLAYBACK_RATE_VALUES","mediaRef","React","createRef","debouncePauseWhileTyping","debounce","current","play","SlateTranscriptEditor","props","currentTime","setCurrentTime","duration","setDuration","playbackRate","setPlaybackRate","editor","useMemo","withReact","withHistory","createEditor","value","setValue","defaultShowSpeakersPreference","showSpeakers","defaultShowTimecodesPreference","showTimecodes","speakerOptions","setSpeakerOptions","showSpeakersCheatShet","setShowSpeakersCheatShet","isPauseWhiletyping","setIsProcessing","isContentModified","setIsContentIsModified","isContentSaved","setIsContentSaved","setIsEditable","query","URLSearchParams","useLocation","search","useEffect","document","body","cursor","transcriptData","res","convertDpeToSlate","uniqueSpeakers","pluck","getUniqueSpeakers","addEventListener","handleTimeUpdated","get","removeEventListener","mediaUrl","getFileTitle","path","basename","trim","e","target","renderElement","useCallback","element","TimedTextElement","DefaultElement","renderLeaf","attributes","children","leaf","onDoubleClick","handleTimedTextClick","data-start","parent","start","data-previous-timings","previousTimings","handleSetSpeakerName","ReactEditor","findPath","speaker","contentEditable","startTimecode","noWrap","width","textTransform","bind","classList","contains","dataset","parseFloat","handleAnalyticsEvents","fn","clickOrigin","timeInSeconds","slateString","parentNode","startWord","SlateHelpers","getSelectionNodes","selection","origin","handleRestoreTimecodes","a","async","updateBloocksTimestamps","alignedSlateData","alignedSlateDataWithInlineTimecodes","insertTimecodesInLineInSlateJs","CssBaseline","Paper","elevation","scoped","generatePreviousTimingsUpToCurrent","showTitle","Typography","variant","backgroundColor","ref","src","height","controls","playsInline","shortTimecode","border","background","paddingRight","newCurrentTime","newCurrentTimeInSeconds","seekBackValue","FormControl","Select","labelId","onChange","previousPlaybackRate","n","tmpNewPlaybackRateValue","newPlaybackRate","playbackRateValue","InputGroup","size","Prepend","Text","aria-label","aria-describedby","readOnly","ts","currentPath","URL","window","location","toString","getShareURL","gutterBottom","Collapse","in","speakerName","toUpperCase","tmpValue","isCaptionType","editorContnet","exportAdapter","slateValue","transcriptTitle","JSON","stringify","download","length","handleAutoSaveChanges","onKeyDown","preventDefault","isSuccess","handleSplitParagraph","handleDeleteInParagraph","paused","pause","status","defaultProps","autoSaveContentType"],"mappings":"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","file":"static/js/6.fec6b2df.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport subtitlesExportOptionsList from \"slate-transcript-editor/util/export-adapters/subtitles-generator/list.js\";\nimport InfoOutlined from \"@material-ui/icons/InfoOutlined\";\nimport CreateOutlinedIcon from \"@material-ui/icons/CreateOutlined\";\n\nfunction SideBtns({\n  handleExport,\n  optionalBtns,\n  handleSetEditable,\n  isEditable,\n  isProcessing,\n}) {\n  const [anchorMenuEl, setAnchorMenuEl] = useState(null);\n\n  // used by MUI export menu\n  const handleMenuClose = () => {\n    setAnchorMenuEl(null);\n  };\n\n  // used by MUI export menu\n  const handleMenuClick = (event) => {\n    setAnchorMenuEl(event.currentTarget);\n  };\n\n  return (\n    <div className=\"side-buttons\">\n        <Tooltip\n          title={\n            \" Double click on a word to jump to the corresponding point in the media\"\n          }\n        >\n          <button color=\"primary\">\n            <InfoOutlined />\n          </button>\n        </Tooltip>\n\n        <Tooltip\n          title={` Turn ${\n            isEditable ? \"off\" : \"on\"\n          } edit mode.  You can edit before exporting the transcript.`}\n        >\n          <button disabled={isProcessing} onClick={handleSetEditable}>\n            <CreateOutlinedIcon color={isEditable ? \"secondary\" : \"white\"} />\n          </button>\n        </Tooltip>\n\n        <Tooltip title={\"Export options\"}>\n          <button\n            aria-controls=\"simple-menu\"\n            aria-haspopup=\"true\"\n            onClick={handleMenuClick}\n          >\n            <SaveAltIcon /> <KeyboardArrowDownIcon />\n          </button>\n        </Tooltip>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorMenuEl}\n          keepMounted\n          open={Boolean(anchorMenuEl)}\n          onClose={handleMenuClose}\n        >\n          <MenuItem onClick={handleMenuClose} disabled>\n            <Link style={{ color: \"black\" }}>Text Export</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"text\",\n                ext: \"txt\",\n                speakers: false,\n                timecodes: false,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\">\n              Text (<code>.txt</code>)\n            </Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"text\",\n                ext: \"txt\",\n                speakers: true,\n                timecodes: false,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\">Text (Speakers)</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"text\",\n                ext: \"txt\",\n                speakers: false,\n                timecodes: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\">Text (Timecodes)</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"text\",\n                ext: \"txt\",\n                speakers: true,\n                timecodes: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\"> Text (Speakers & Timecodes)</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"text\",\n                ext: \"txt\",\n                speakers: true,\n                timecodes: true,\n                atlasFormat: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\"> Text (Atlas format)</Link>\n          </MenuItem>\n          <Divider />\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"word\",\n                ext: \"docx\",\n                speakers: false,\n                timecodes: false,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\">\n              {\" \"}\n              Word (<code>.docx</code>)\n            </Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"word\",\n                ext: \"docx\",\n                speakers: true,\n                timecodes: false,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\"> Word (Speakers)</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"word\",\n                ext: \"docx\",\n                speakers: false,\n                timecodes: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\"> Word (Timecodes)</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"word\",\n                ext: \"docx\",\n                speakers: true,\n                timecodes: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\"> Word (Speakers & Timecodes)</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"word\",\n                ext: \"docx\",\n                speakers: false,\n                timecodes: false,\n                inlineTimecodes: true,\n                hideTitle: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\"> Word (OHMS)</Link>\n          </MenuItem>\n          <Divider />\n          <MenuItem onClick={handleMenuClose} disabled>\n            <Link style={{ color: \"black\" }}>Closed Captions Export</Link>\n          </MenuItem>\n          {subtitlesExportOptionsList.map(({ type, label, ext }, index) => {\n            return (\n              <MenuItem\n                key={index + label}\n                onClick={() => {\n                  handleExport({ type, ext, isDownload: true });\n                  handleMenuClose();\n                }}\n              >\n                <Link color=\"primary\">\n                  {label} (<code>.{ext}</code>)\n                </Link>\n              </MenuItem>\n            );\n          })}\n          <Divider />\n          <MenuItem onClick={handleMenuClose} disabled>\n            <Link style={{ color: \"black\" }}>Developer options</Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"json-slate\",\n                ext: \"json\",\n                speakers: true,\n                timecodes: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\">\n              SlateJs (<code>.json</code>)\n            </Link>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleExport({\n                type: \"json-digitalpaperedit\",\n                ext: \"json\",\n                speakers: true,\n                timecodes: true,\n                isDownload: true,\n              });\n              handleMenuClose();\n            }}\n          >\n            <Link color=\"primary\">\n              DPE (<code>.json</code>)\n            </Link>\n          </MenuItem>\n        </Menu>\n      {optionalBtns}\n    </div>\n  );\n}\n\nexport default SideBtns;\n","import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport PropTypes, { string } from \"prop-types\";\nimport path from \"path\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport BFormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Select from \"@material-ui/core/Select\";\nimport Link from \"@material-ui/core/Link\";\nimport Replay10Icon from \"@material-ui/icons/Replay10\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport debounce from \"lodash/debounce\";\nimport throttle from \"lodash/throttle\";\nimport { createEditor, Editor, Transforms } from \"slate\";\n\nimport { useLocation, useHistory } from \"react-router-dom\";\n\n// https://docs.slatejs.org/walkthroughs/01-installing-slate\n// Import the Slate components and React plugin.\nimport { Slate, Editable, withReact, ReactEditor } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\n\nimport SideBtns from \"./SideBtns\";\nimport { shortTimecode } from \"slate-transcript-editor/util/timecode-converter\";\nimport download from \"slate-transcript-editor/util/downlaod/index.js\";\nimport convertDpeToSlate from \"slate-transcript-editor/util/dpe-to-slate\";\n// TODO: This should be moved in export utils\nimport insertTimecodesInLineInSlateJs from \"slate-transcript-editor/util/insert-timecodes-in-line-in-words-list\";\nimport pluck from \"slate-transcript-editor/util/pluk\";\nimport plainTextalignToSlateJs from \"slate-transcript-editor/util/export-adapters/slate-to-dpe/update-timestamps/plain-text-align-to-slate\";\nimport updateBloocksTimestamps from \"slate-transcript-editor/util/export-adapters/slate-to-dpe/update-timestamps/update-bloocks-timestamps\";\nimport exportAdapter, {\n  isCaptionType,\n} from \"slate-transcript-editor/util/export-adapters\";\nimport generatePreviousTimingsUpToCurrent from \"slate-transcript-editor/util/dpe-to-slate/generate-previous-timings-up-to-current\";\nimport SlateHelpers from \"slate-transcript-editor/components/slate-helpers\";\n\nconst PLAYBACK_RATE_VALUES = [\n  0.2,\n  0.25,\n  0.5,\n  0.75,\n  1,\n  1.25,\n  1.5,\n  1.75,\n  2,\n  2.25,\n  2.5,\n  3,\n  3.5,\n];\nconst SEEK_BACK_SEC = 10;\nconst PAUSE_WHILTE_TYPING_TIMEOUT_MILLISECONDS = 1500;\n// const MAX_DURATION_FOR_PERFORMANCE_OPTIMIZATION_IN_SECONDS = 3600;\nconst REPLACE_WHOLE_TEXT_INSTRUCTION =\n  \"Replace whole text. \\n\\nAdvanced feature, if you already have an accurate transcription for the whole text, and you want to restore timecodes for it, you can use this to replace the text in this transcript. \\n\\nFor now this is an experimental feature. \\n\\nIt expects plain text, with paragraph breaks as new line breaks but no speakers.\";\n\nconst mediaRef = React.createRef();\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nconst pauseWhileTypeing = (current) => {\n  current.play();\n};\nconst debouncePauseWhileTyping = debounce(\n  pauseWhileTypeing,\n  PAUSE_WHILTE_TYPING_TIMEOUT_MILLISECONDS\n);\n\nfunction SlateTranscriptEditor(props) {\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const editor = useMemo(() => withReact(withHistory(createEditor())), []);\n  const [value, setValue] = useState([]);\n  const defaultShowSpeakersPreference =\n    typeof props.showSpeakers === \"boolean\" ? props.showSpeakers : true;\n  const defaultShowTimecodesPreference =\n    typeof props.showTimecodes === \"boolean\" ? props.showTimecodes : true;\n  const [showSpeakers, setShowSpeakers] = useState(\n    defaultShowSpeakersPreference\n  );\n  const [showTimecodes, setShowTimecodes] = useState(\n    defaultShowTimecodesPreference\n  );\n  const [speakerOptions, setSpeakerOptions] = useState([]);\n  const [showSpeakersCheatShet, setShowSpeakersCheatShet] = useState(false);\n  const [saveTimer, setSaveTimer] = useState(null);\n  const [isPauseWhiletyping, setIsPauseWhiletyping] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  // used isContentModified to avoid unecessarily run alignment if the slate value contnet has not been modified by the user since\n  // last save or alignment\n  const [isContentModified, setIsContentIsModified] = useState(false);\n  const [isContentSaved, setIsContentSaved] = useState(true);\n  const [isEditable, setIsEditable] = useState(props.isEditable, []);\n  let query = useQuery();\n\n  useEffect(() => {\n    if (isProcessing) {\n      document.body.style.cursor = \"wait\";\n    } else {\n      document.body.style.cursor = \"default\";\n    }\n  }, [isProcessing]);\n\n  useEffect(() => {\n    if (props.transcriptData) {\n      const res = convertDpeToSlate(props.transcriptData);\n      setValue(res);\n    }\n  }, [props.transcriptData]);\n\n  useEffect(() => {\n    const getUniqueSpeakers = pluck(\"speaker\");\n    const uniqueSpeakers = getUniqueSpeakers(value);\n    setSpeakerOptions(uniqueSpeakers);\n  }, [value]);\n\n  //  useEffect(() => {\n  //    const getUniqueSpeakers = pluck('speaker');\n  //    const uniqueSpeakers = getUniqueSpeakers(value);\n  //    setSpeakerOptions(uniqueSpeakers);\n  //  }, [showSpeakersCheatShet]);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (mediaRef && mediaRef.current) {\n      // setDuration(mediaRef.current.duration);\n      mediaRef.current.playbackRate = playbackRate;\n      mediaRef.current.addEventListener(\"timeupdate\", handleTimeUpdated);\n      if (query.get(\"ts\")) {\n        mediaRef.current.currentTime = query.get(\"ts\");\n      }\n    }\n    return function cleanup() {\n      // removeEventListener\n      mediaRef.current.removeEventListener(\"timeupdate\", handleTimeUpdated);\n    };\n  }, [props.mediaUrl]);\n\n  useEffect(() => {}, [currentTime]);\n\n  // useEffect(() => {\n  //   // Update the document title using the browser API\n  //   if (mediaRef && mediaRef.current) {\n  //     // Not working\n  //     setDuration(mediaRef.current.duration);\n  //     if (mediaRef.current.duration >= MAX_DURATION_FOR_PERFORMANCE_OPTIMIZATION_IN_SECONDS) {\n  //       setShowSpeakers(false);\n  //       showTimecodes(false);\n  //     }\n  //   }\n  // }, [mediaRef]);\n\n  const getSlateContent = () => {\n    return value;\n  };\n\n  const getFileName = () => {\n    return path.basename(props.mediaUrl).trim();\n  };\n  const getFileTitle = () => {\n    if (props.title) {\n      return props.title;\n    }\n    return getFileName();\n  };\n\n  const getShareURL = (ts) => {\n    let currentPath = new URL(window.location.toString());\n    currentPath.search = \"\";\n    return `${currentPath.toString()}?ts=${ts}`;\n  };\n\n  const handleTimeUpdated = (e) => {\n    setCurrentTime(e.target.currentTime);\n    // TODO: setting duration here as a workaround\n    setDuration(mediaRef.current.duration);\n    //  TODO: commenting this out for now, not sure if it will fire to often?\n    // if (props.handleAnalyticsEvents) {\n    //   // handles if click cancel and doesn't set speaker name\n    //   props.handleTimeUpdated('ste_handle_time_update', {\n    //     fn: 'handleTimeUpdated',\n    //     duration: mediaRef.current.duration,\n    //     currentTime: e.target.currentTime,\n    //   });\n    // }\n  };\n\n  const handleSetPlaybackRate = (e) => {\n    const previousPlaybackRate = playbackRate;\n    const n = e.target.value;\n    const tmpNewPlaybackRateValue = parseFloat(n);\n    if (mediaRef && mediaRef.current) {\n      mediaRef.current.playbackRate = tmpNewPlaybackRateValue;\n      setPlaybackRate(tmpNewPlaybackRateValue);\n\n      if (props.handleAnalyticsEvents) {\n        props.handleAnalyticsEvents(\"ste_handle_set_playback_rate\", {\n          fn: \"handleSetPlaybackRate\",\n          previousPlaybackRate,\n          newPlaybackRate: tmpNewPlaybackRateValue,\n        });\n      }\n    }\n  };\n\n  const handleSeekBack = () => {\n    if (mediaRef && mediaRef.current) {\n      const newCurrentTime = mediaRef.current.currentTime - SEEK_BACK_SEC;\n      mediaRef.current.currentTime = newCurrentTime;\n\n      if (props.handleAnalyticsEvents) {\n        props.handleAnalyticsEvents(\"ste_handle_seek_back\", {\n          fn: \"handleSeekBack\",\n          newCurrentTimeInSeconds: newCurrentTime,\n          seekBackValue: SEEK_BACK_SEC,\n        });\n      }\n    }\n  };\n\n  const renderElement = useCallback((props) => {\n    switch (props.element.type) {\n      case \"timedText\":\n        return <TimedTextElement {...props} />;\n      default:\n        return <DefaultElement {...props} />;\n    }\n  }, []);\n\n  const renderLeaf = useCallback(({ attributes, children, leaf }) => {\n    return (\n      <p\n        onDoubleClick={handleTimedTextClick}\n        className={\"timecode text transcript\"}\n        data-start={children.props.parent.start}\n        data-previous-timings={children.props.parent.previousTimings}\n        // title={'double click on a word to jump to the corresponding point in the media'}\n        {...attributes}\n      >\n        {children}\n      </p>\n    );\n  }, []);\n\n  //\n\n  /**\n   * `handleSetSpeakerName` is outside of TimedTextElement\n   * to improve the overall performance of the editor,\n   * especially on long transcripts\n   * @param {*} element - props.element, from `renderElement` function\n   */\n  const handleSetSpeakerName = (element) => {\n    const pathToCurrentNode = ReactEditor.findPath(editor, element);\n    const oldSpeakerName = element.speaker;\n  };\n\n  const TimedTextElement = (props) => {\n    let textLg = 12;\n    let textXl = 12;\n    if (!showSpeakers && !showTimecodes) {\n      textLg = 12;\n      textXl = 12;\n    } else if (showSpeakers && !showTimecodes) {\n      textLg = 9;\n      textXl = 9;\n    } else if (!showSpeakers && showTimecodes) {\n      textLg = 9;\n      textXl = 10;\n    } else if (showSpeakers && showTimecodes) {\n      textLg = 6;\n      textXl = 7;\n    }\n\n    return (\n      <div className=\"text-box\" {...props.attributes}>\n        <div className=\"top\">\n          {showTimecodes && (\n            <div className={\"p-t-2 text-truncate\"} contentEditable={false}>\n              <code\n                contentEditable={false}\n                style={{ cursor: \"pointer\" }}\n                className={\"timecode text-muted unselectable timestamp\"}\n                onClick={handleTimedTextClick}\n                onDoubleClick={handleTimedTextClick}\n                title={props.element.startTimecode}\n                data-start={props.element.start}\n              >\n                {props.element.startTimecode}\n              </code>\n            </div>\n          )}\n          {showSpeakers && (\n            <div className={\"p-t-2 text-truncate\"} contentEditable={false}>\n              <p\n                noWrap\n                contentEditable={false}\n                className={\"text-truncate text-muted unselectable speaker\"}\n                style={{\n                  cursor: \"pointer\",\n                  width: \"100%\",\n                  textTransform: \"uppercase\",\n                }}\n                // title={props.element.speaker.toUpperCase()}\n                title={props.element.speaker}\n                onClick={handleSetSpeakerName.bind(this, props.element)}\n              >\n                {props.element.speaker}\n              </p>\n            </div>\n          )}\n        </div>\n        <div className=\"bottom\">{props.children}</div>\n      </div>\n    );\n  };\n\n  const DefaultElement = (props) => {\n    return <p {...props.attributes}>{props.children}</p>;\n  };\n\n  const handleTimedTextClick = (e) => {\n    if (e.target.classList.contains(\"timecode\")) {\n      const start = e.target.dataset.start;\n      if (mediaRef && mediaRef.current) {\n        mediaRef.current.currentTime = parseFloat(start);\n        mediaRef.current.play();\n\n        if (props.handleAnalyticsEvents) {\n          // handles if click cancel and doesn't set speaker name\n          props.handleAnalyticsEvents(\"ste_handle_timed_text_click\", {\n            fn: \"handleTimedTextClick\",\n            clickOrigin: \"timecode\",\n            timeInSeconds: mediaRef.current.currentTime,\n          });\n        }\n      }\n    } else if (e.target.dataset.slateString) {\n      if (e.target.parentNode.dataset.start) {\n        const { startWord } = SlateHelpers.getSelectionNodes(\n          editor,\n          editor.selection\n        );\n        if (mediaRef && mediaRef.current && startWord && startWord.start) {\n          mediaRef.current.currentTime = parseFloat(startWord.start);\n          mediaRef.current.play();\n\n          if (props.handleAnalyticsEvents) {\n            // handles if click cancel and doesn't set speaker name\n            props.handleAnalyticsEvents(\"ste_handle_timed_text_click\", {\n              fn: \"handleTimedTextClick\",\n              clickOrigin: \"word\",\n              timeInSeconds: mediaRef.current.currentTime,\n            });\n          }\n        } else {\n          // fallback in case there's some misalignment with the words\n          // use the start of paragraph instead\n          const start = parseFloat(e.target.parentNode.dataset.start);\n          if (mediaRef && mediaRef.current && start) {\n            mediaRef.current.currentTime = parseFloat(start);\n            mediaRef.current.play();\n\n            if (props.handleAnalyticsEvents) {\n              // handles if click cancel and doesn't set speaker name\n              props.handleAnalyticsEvents(\"ste_handle_timed_text_click\", {\n                fn: \"handleTimedTextClick\",\n                origin: \"paragraph-fallback\",\n                timeInSeconds: mediaRef.current.currentTime,\n              });\n            }\n          }\n        }\n      }\n    }\n  };\n\n  const handleSetEditable = () => {\n    setIsEditable(!isEditable);\n  };\n\n  // TODO: refacto this function, to be cleaner and easier to follow.\n  const handleRestoreTimecodes = async (inlineTimecodes = false) => {\n    // if nothing as changed and you don't need to modify the data\n    // to get inline timecodes, then just return as is\n    if (!isContentModified && !inlineTimecodes) {\n      return value;\n    }\n    // only used by Word (OHMS) export\n    const alignedSlateData = await updateBloocksTimestamps(\n      value,\n      inlineTimecodes\n    );\n    setValue(alignedSlateData);\n    setIsContentIsModified(false);\n\n    if (inlineTimecodes) {\n      // we don't want to show the inline timecode in the editor, but we want to return them to export function\n      const alignedSlateDataWithInlineTimecodes = insertTimecodesInLineInSlateJs(\n        alignedSlateData\n      );\n      return alignedSlateDataWithInlineTimecodes;\n    }\n\n    return alignedSlateData;\n  };\n\n  // TODO: this could be refactore, and brought some of this logic inside the exportAdapter (?)\n  // To make this a little cleaner\n  const handleExport = async ({\n    type,\n    ext,\n    speakers,\n    timecodes,\n    inlineTimecodes,\n    hideTitle,\n    atlasFormat,\n    isDownload,\n  }) => {\n    if (props.handleAnalyticsEvents) {\n      // handles if click cancel and doesn't set speaker name\n      props.handleAnalyticsEvents(\"ste_handle_export\", {\n        fn: \"handleExport\",\n        type,\n        ext,\n        speakers,\n        timecodes,\n        inlineTimecodes,\n        hideTitle,\n        atlasFormat,\n        isDownload,\n      });\n    }\n\n    try {\n      setIsProcessing(true);\n      let tmpValue = getSlateContent();\n      if (timecodes) {\n        tmpValue = await handleRestoreTimecodes();\n      }\n\n      if (inlineTimecodes) {\n        tmpValue = await handleRestoreTimecodes(inlineTimecodes);\n      }\n\n      if (isContentModified && type === \"json-slate\") {\n        tmpValue = await handleRestoreTimecodes();\n      }\n\n      if (isContentModified && type === \"json-digitalpaperedit\") {\n        tmpValue = await handleRestoreTimecodes();\n      }\n\n      if (isContentModified && isCaptionType(type)) {\n        tmpValue = await handleRestoreTimecodes();\n      }\n      // export adapter does not doo any alignment\n      // just converts between formats\n      let editorContnet = exportAdapter({\n        slateValue: tmpValue,\n        type,\n        transcriptTitle: getFileTitle(),\n        speakers,\n        timecodes,\n        inlineTimecodes,\n        hideTitle,\n        atlasFormat,\n      });\n\n      if (ext === \"json\") {\n        editorContnet = JSON.stringify(editorContnet, null, 2);\n      }\n      if (ext !== \"docx\" && isDownload) {\n        download(editorContnet, `${getFileTitle()}.${ext}`);\n      }\n      return editorContnet;\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // const debounced_version = throttle(handleRestoreTimecodes, 3000, { leading: false, trailing: true });\n  // TODO: revisit logic for\n  // - splitting paragraph via enter key\n  // - merging paragraph via delete\n  // - merging paragraphs via deleting across paragraphs\n  const handleOnKeyDown = async (event) => {\n    if (!isEditable) {\n      event.preventDefault();\n      return;\n    }\n\n    setIsContentIsModified(true);\n    setIsContentSaved(false);\n    //  ArrowRight ArrowLeft ArrowUp ArrowUp\n    if (event.key === \"Enter\") {\n      // intercept Enter, and handle timecodes when splitting a paragraph\n      event.preventDefault();\n      // console.info('For now disabling enter key to split a paragraph, while figuring out the aligment issue');\n      // handleSetPauseWhileTyping();\n      // TODO: Edge case, hit enters after having typed some other words?\n      const isSuccess = SlateHelpers.handleSplitParagraph(editor);\n      if (props.handleAnalyticsEvents) {\n        // handles if click cancel and doesn't set speaker name\n        props.handleAnalyticsEvents(\"ste_handle_split_paragraph\", {\n          fn: \"handleSplitParagraph\",\n          isSuccess,\n        });\n      }\n      if (isSuccess) {\n        // as part of splitting paragraphs there's an alignement step\n        // so content is not counted as modified\n        setIsContentIsModified(false);\n      }\n    }\n    if (event.key === \"Backspace\") {\n      const isSuccess = SlateHelpers.handleDeleteInParagraph({ editor, event });\n      // Commenting that out for now, as it might get called too often\n      // if (props.handleAnalyticsEvents) {\n      //   // handles if click cancel and doesn't set speaker name\n      //   props.handleAnalyticsEvents('ste_handle_delete_paragraph', {\n      //     fn: 'handleDeleteInParagraph',\n      //     isSuccess,\n      //   });\n      // }\n      if (isSuccess) {\n        // as part of splitting paragraphs there's an alignement step\n        // so content is not counted as modified\n        setIsContentIsModified(false);\n      }\n    }\n    // if (event.key.length == 1 && ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 49 && event.keyCode <= 57))) {\n    //   const alignedSlateData = await debouncedSave(value);\n    //   setValue(alignedSlateData);\n    //   setIsContentIsModified(false);\n    // }\n\n    if (isPauseWhiletyping) {\n      // logic for pause while typing\n      // https://schier.co/blog/wait-for-user-to-stop-typing-using-javascript\n      // TODO: currently eve the video was paused, and pause while typing is on,\n      // it will play it when stopped typing. so added btn to turn feature on off.\n      // and disabled as default.\n      // also pause while typing might introduce performance issues on longer transcripts\n      // if on every keystroke it's creating and destroing a timer.\n      // should find a more efficient way to \"debounce\" or \"throttle\" this functionality\n      if (mediaRef && mediaRef.current && !mediaRef.current.paused) {\n        mediaRef.current.pause();\n        debouncePauseWhileTyping(mediaRef.current);\n      }\n    }\n    // auto align when not typing\n  };\n\n  return (\n    <main>\n      <CssBaseline />\n      <Paper elevation={3} />\n      <style scoped>\n        {`/* Next words */\n             .timecode[data-previous-timings*=\"${generatePreviousTimingsUpToCurrent(\n               currentTime\n             )}\"]{\n                  color:  #9E9E9E;\n              }\n              // NOTE: The CSS is here, coz if you put it as a separate index.css the current webpack does not bundle it with the component\n              /* TODO: Temporary, need to scope this to the component in a sensible way */\n              .editor-wrapper-container {\n                font-family: Roboto, sans-serif;\n              }\n              .editor-wrapper-container {\n                padding: 8px 16px;\n                height: 90vh;\n                overflow: auto;\n              }\n              /* https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\n              TODO: only working in Chrome, not working in Firefox, and Safari - OSX\n              if selecting text, not showing selection\n              Commented out because it means cannot select speakers and timecode anymore\n              which is the intended default behavior but needs to come with export\n              functionality to export as plain text, word etc.. otherwise user won't be able\n              to get text out of component with timecodes and speaker names in the interim */\n              .unselectable {\n                -moz-user-select: none;\n                -webkit-user-select: none;\n                -ms-user-select: none;\n                user-select: none;\n              }\n              .timecode:hover {\n                text-decoration: underline;\n              }\n              .timecode.text:hover {\n                text-decoration: none;\n              }\n          `}\n      </style>\n      {props.showTitle && (\n        <Tooltip title={props.title}>\n          <Typography variant=\"h5\" noWrap>\n            {props.title}\n          </Typography>\n        </Tooltip>\n      )}\n\n      <div className=\"body-wrapper\">\n        <div className=\"sidebar\">\n          {props.mediaUrl && (\n            <>\n              <div style={{ backgroundColor: \"black\" }}>\n                <video\n                  ref={mediaRef}\n                  src={props.mediaUrl}\n                  width={\"100%\"}\n                  height=\"auto\"\n                  controls\n                  playsInline\n                ></video>\n              </div>\n              <div className=\"timer\">\n                <p>\n                  <code style={{ color: \"grey\" }}>\n                    {shortTimecode(currentTime)}\n                  </code>\n                  <span style={{ color: \"grey\" }}> {` | `}</span>\n                  <code style={{ color: \"grey\" }}>\n                    {duration ? `${shortTimecode(duration)}` : \"00:00:00\"}\n                  </code>\n                  <Tooltip title={`Seek back by ${SEEK_BACK_SEC} seconds`}>\n                    <button\n                      style={{\n                        border: \"none\",\n                        background: \"none\",\n                        paddingRight: \"6px\",\n                        color: \"grey\",\n                      }}\n                      onClick={handleSeekBack}\n                    >\n                      <Replay10Icon />\n                    </button>\n                  </Tooltip>\n                </p>\n\n                {/* </OverlayTrigger> */}\n                <div>\n                  <FormControl>\n                    {/* <InputLabel id=\"demo-simple-select-label\">Speed</InputLabel> */}\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      id=\"demo-simple-select\"\n                      value={playbackRate}\n                      onChange={handleSetPlaybackRate}\n                    >\n                      {PLAYBACK_RATE_VALUES.map((playbackRateValue, index) => {\n                        return (\n                          <MenuItem\n                            key={index + playbackRateValue}\n                            value={playbackRateValue}\n                          >\n                            {\" \"}\n                            x {playbackRateValue}\n                          </MenuItem>\n                        );\n                      })}\n                    </Select>\n                    {/* <FormHelperText>Speed</FormHelperText> */}\n                  </FormControl>\n                </div>\n              </div>\n\n              <div style={{ width: \"100%\" }}>\n                <InputGroup size=\"sm\" className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                      Link at time\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <BFormControl\n                    aria-label=\"Share URL @ time\"\n                    aria-describedby=\"inputGroup-sizing-sm\"\n                    readOnly\n                    value={getShareURL(currentTime)}\n                  />\n                </InputGroup>\n              </div>\n              <div>\n                <Link\n                  color=\"inherit\"\n                  onClick={() => {\n                    setShowSpeakersCheatShet(!showSpeakersCheatShet);\n                  }}\n                >\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Speakers\n                  </Typography>\n                </Link>\n\n                <Collapse in={showSpeakersCheatShet}>\n                  {speakerOptions.map((speakerName, index) => {\n                    return (\n                      <Typography\n                        variant=\"body2\"\n                        gutterBottom\n                        key={index + speakerName}\n                        className={\"text-truncate\"}\n                        title={speakerName.toUpperCase()}\n                      >\n                        {speakerName}\n                      </Typography>\n                    );\n                  })}\n                </Collapse>\n              </div>\n            </>\n          )}\n          <div>{props.children}</div>\n        </div>\n\n        \n        <SideBtns\n          handleExport={handleExport}\n          isEditable={isEditable}\n          handleSetEditable={handleSetEditable}\n          isProcessing={isProcessing}\n          isContentModified={isContentModified}\n          isContentSaved={isContentSaved}\n          setIsProcessing={setIsProcessing}\n          optionalBtns={props.optionalBtns}\n          />\n          \n        <div className=\"transcripts\">\n          {value.length !== 0 ? (\n            <>\n              <Paper elevation={3}>\n                <section className=\"editor-wrapper-container\">\n                  <Slate\n                    editor={editor}\n                    value={value}\n                    onChange={(value) => {\n                      if (props.handleAutoSaveChanges) {\n                        props.handleAutoSaveChanges(value);\n                        setIsContentSaved(true);\n                      }\n                      return setValue(value);\n                    }}\n                  >\n                    <Editable\n                      // readOnly={typeof isEditable === 'boolean' ? !isEditable : false}\n                      readOnly={false}\n                      renderElement={renderElement}\n                      renderLeaf={renderLeaf}\n                      onKeyDown={handleOnKeyDown}\n                    />\n                  </Slate>\n                </section>\n              </Paper>\n            </>\n          ) : (\n            <section className=\"text-center\">\n              {(props.status === \"Loading\" && (\n                <i className=\"text-center\">Loading...</i>\n              )) || (\n                <i className=\"text-center\">Pick a workshop to get started...</i>\n              )}\n            </section>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default SlateTranscriptEditor;\n\nSlateTranscriptEditor.propTypes = {\n  transcriptData: PropTypes.object,\n  mediaUrl: PropTypes.string,\n  handleSaveEditor: PropTypes.func,\n  handleAutoSaveChanges: PropTypes.func,\n  autoSaveContentType: PropTypes.string,\n  isEditable: PropTypes.bool,\n  showTimecodes: PropTypes.bool,\n  showSpeakers: PropTypes.bool,\n  title: PropTypes.string,\n  showTitle: PropTypes.bool,\n};\n\nSlateTranscriptEditor.defaultProps = {\n  showTitle: false,\n  showTimecodes: true,\n  showSpeakers: true,\n  autoSaveContentType: \"digitalpaperedit\",\n  isEditable: true,\n};\n"],"sourceRoot":""}